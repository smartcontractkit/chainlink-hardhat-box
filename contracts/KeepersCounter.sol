// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol";

/**
 * @title The Counter contract
 * @notice  A keeper-compatible contract that increments counter variable at fixed time intervals
 */
contract KeepersCounter is KeeperCompatibleInterface {
  /**
   * Public counter variable
   */
  uint256 public counter;

    /**
    * Public multiplier boolean variable
    */
    bool public multiplierEnabled;
    
    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public immutable interval;
    uint public lastTimeStamp;
	
	// keccak256 hash of empty checkData
	bytes32 constant public emptyCheckDataHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;

    constructor(uint updateInterval, bool _multiplierEnabled) {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;
      counter = 0;
      multiplierEnabled = _multiplierEnabled;
    }

	function setMultiplierEnabled(bool _enabled) external {
		multiplierEnabled = _enabled;
	}

    function checkMultiplier() external view returns (bool upkeepNeeded, bytes memory performData) {
        upkeepNeeded = multiplierEnabled && (counter == 3 || counter == 10);
        if (upkeepNeeded) {
            uint256 multiplier = counter % 2 == 0 ? 10 : 3;
            performData = abi.encodeWithSelector(this.multiplyCounter.selector, multiplier);
        }
        return (upkeepNeeded, performData);
    }

    function checkReset() external view returns (bool upkeepNeeded, bytes memory performData) {
        upkeepNeeded = counter > 100;
        performData = abi.encodePacked(bytes4(abi.encodeWithSelector(this.resetCounter.selector, "")));
        return (upkeepNeeded, performData);
    }

    function multiplyCounter(uint256 _amount) external {
        require(multiplierEnabled && (counter == 3 || counter == 10), "Upkeep not satisfied");
        require(counter == _amount, "Only valid multiplier");
        counter *= _amount;
    }

    function resetCounter() external {
        require(counter > 100, "Too early");
        counter = 0;
    }

    function checkUpkeep(bytes calldata checkData)
		external
		view
		override
		returns (bool upkeepNeeded, bytes memory performData)
	{
		if (keccak256(checkData) == emptyCheckDataHash) {
			// We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
			upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
			performData = "";
		} else {
            (bool success, bytes memory returnedData) = address(this).staticcall(checkData);
            require(success);

            (upkeepNeeded, performData) = abi.decode(returnedData, (bool, bytes));
        }
    }

    function performUpkeep(bytes calldata performData) external override {
		lastTimeStamp = block.timestamp;
        if (keccak256(performData) == emptyCheckDataHash) {
			// We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
			counter = counter + 1;
		} else {
            (bool success, ) = address(this).call(performData);
            require(success);
        }
    }
}
